[
{
	"uri": "https://docs.covergates.com/server/github/",
	"title": "Config GitHub",
	"tags": [],
	"description": "",
	"content": "Create OAuth Application  covergates-server uses OAuth2 to control user access. To create an OAuth2 application on GitHub, please refer to Creating an OAuth App for detail.\nNotice that the Authorization callback URL should be https://your.domain.name/login/github. Here is an example:\nYou should get the Client ID and Client Secret on your application setting page.\nUpdate Environment  Once you create an OAuth application on GitHub, you could use below environment variables to tell covergates-server to use it.\nCopy   export GATES_GITHUB_CLIENT_ID=\u0026#34;Client ID\u0026#34;, export GATES_GITHUB_CLIENT_SECRET=\u0026#34;Client Secret\u0026#34;, export GATES_GITHUB_SERVER=\u0026#34;https://github.com\u0026#34;, export GATES_GITHUB_API_SERVER=\u0026#34;https://api.github.com\u0026#34;,    Restart your covergates-server to apply to new setting.\n"
},
{
	"uri": "https://docs.covergates.com/server/gitea/",
	"title": "Config Gitea",
	"tags": [],
	"description": "",
	"content": "Create OAuth Application  covergates-server uses OAuth2 to control user access. To create an OAuth2 application on Gitea, navigate Settings \u0026gt; Applications on your Gitea website. The URL would be:\n# Replace http://localhost:3000 to your Gitea URL http://localhost:3000/user/settings/applications Create a new application as shown below:\nReplace http://localhost:8080/login/gitea to your Covergates URL, such as http://your.domain.name/login/gitea  You should get your Client ID and Client Secret like:\nUpdate Environment  Once you create an OAuth application on Gitea, you could use below environment variables to tell covergates-server to use it.\nCopy   export GATES_GITEA_CLIENT_ID=\u0026#34;2c591d86-b26a-416a-9b1c-4bc2ea770033\u0026#34;, export GATES_GITEA_CLIENT_SECRET=\u0026#34;USBsFNPJmlJg1VPx-t5Pwwo2hZ9lDDXUEEP-Jebzm-w=\u0026#34;, export GATES_GITEA_SERVER=\u0026#34;http://localhost:3000\u0026#34;, export GATES_GITEA_SKIP_VERITY=\u0026#34;true\u0026#34;    Replace GATES_GITEA_CLIENT_ID, GATES_GITEA_CLIENT_SECRET and GATES_GITEA_SERVER to the value you acquire on previous step.  Restart your covergates-server to apply to new setting.\n"
},
{
	"uri": "https://docs.covergates.com/server/gitlab/",
	"title": "Config GitLab",
	"tags": [],
	"description": "",
	"content": "Create OAuth Application  covergates-server uses OAuth2 to control user access. To create an OAuth2 application on GitLab, navigate http://your.gitlab.domain/profile/applications on your GitLab website.\nCreate a new application as shown below:\nReplace http://localhost:8080/login/gitlab to your Covergates URL, such as http://your.domain.name/login/gitlab  Notice that covergates requires below scopes:\n api read_user read_api read_repository profile email  You should get your Client ID and Client Secret like:\nUpdate Environment  Once you create an OAuth application on GitLab, you could use below environment variables to tell covergates-server to use it.\nCopy   export GATES_GITLAB_CLIENT_ID=\u0026#34;68e4d83d0093dcb0e862eb9b4dbdfbb7b2e993e9f0259a66017f18995d0cdaf7\u0026#34;, export GATES_GITLAB_CLIENT_SECRET=\u0026#34;ed989a0a94ecb7c0520f764f78ff3ff751bab198ddfebdb39f9bdf2b9aa958f7\u0026#34;, export GATES_GITLAB_SERVER=\u0026#34;http://localhost\u0026#34;, export GATES_GITLAB_SKIP_VERITY=\u0026#34;true\u0026#34;    Replace GATES_GITLAB_CLIENT_ID, GATES_GITLAB_CLIENT_SECRET and GATES_GITLAB_SERVER to the value you acquire on previous step.  Restart your covergates-server to apply to new setting.\n"
},
{
	"uri": "https://docs.covergates.com/start/",
	"title": "Getting Started",
	"tags": [],
	"description": "",
	"content": "How to use Covergates for beginner. Overview  This chapter will introduce how to use Covergates. It will use official website https://covergates.com as example. If you already have a self-hosted Covergates service, please replace https://covergates.com in the example to your URL. For more information about self-hosted Coverages service, please refer to Self-Hosted Server chapter.\n Quick Start Command Line Tool Repository Setting  "
},
{
	"uri": "https://docs.covergates.com/start/quick/",
	"title": "Quick Start",
	"tags": [],
	"description": "",
	"content": "This tutorial will access to https://covergates.com. If you are using self-hosted version, please replace https://covergates.com/ to your self-hosted server URL. Fundamental Workflow    Sign up Covergates with your GitHub or Gitea account.\n  Navigate https://covergates.com/repo to the list of your repositories.\n  Click ACTIVATE button to activate the repository for uploading coverage reports.\n  Go to SETTING tag, you can update report path filter and get your Report ID\nTo get more information about repository setting, please refer to Repository Setting    Run testing for your language and generate coverage report. You can refer to Supported Language for more detail.\n  Download the latest released covergates command line tool for your platform. Once downloaded, the binary can run directly. You could put it to somewhere in your PATH.\n  Upload your report by running covergates upload, for example:\nCopy   covergates upload --report \u0026lt;Report ID\u0026gt; --type go ./coverage.out    or for self-hosted server\nCopy   export REPORT_ID=\u0026#34;Report ID\u0026#34; export API_URL=\u0026#34;http://your.domain.name/api/v1\u0026#34; covergates upload --type go ./coverage.out    You can refer to Command Line Tool for more options.    Congratulation!  Now you can navigate your repository page to see your report!\n  "
},
{
	"uri": "https://docs.covergates.com/start/cli/",
	"title": "Command Line Tool",
	"tags": [],
	"description": "",
	"content": "The Command  You can acquire covergates command line tool for releases page. Download the .tar.gz for your platform and extract it to somewhere in your PATH. You test it by running:\nCopy   covergates help    NAME: covergate - A new cli application USAGE: covergates [global options] command [command options] [arguments...] VERSION: 0.0 COMMANDS: upload upload coverage report comment leave a report summary comment help, h Shows a list of commands or help for one command GLOBAL OPTIONS: --token value provide OAuth token for API [$GATES_TOKEN] --url value api service url (default: \u0026#34;https://covergates.com/api/v1\u0026#34;) [$API_URL] --help, -h show help (default: false) --version, -v print the version (default: false) By default, covergates will connect to https://covergates.com/api/v1. You can change it to your self-hosted server with:\nCopy   export API_URL=\u0026#34;https://your.domain.name/api/v1\u0026#34;    You can also rebuild the covergates to permanently change the API_URL, please refer to README.md for more detail.\nUpload Command  NAME: covergates upload - upload coverage report USAGE: covergates upload [command options] report OPTIONS: --report value report id [$REPORT_ID] --type value report type --branch value branch to upload the report [$GITHUB_HEAD_REF, $DRONE_SOURCE_BRANCH] --help, -h show help (default: false) covergates upload helps you upload coverage reports. It requires at least 3 arguments:\n --report: Report ID --type: Report Type report: Report Path  You could omit --report once you setup REPORT_ID environment.\nThe supported report type --type are:\n   Language Type Format Report Name Example     Go go cover coverage.out   Perl perl Devel::Cover core_db   Python python Coverage.py - xml coverage.xml   Ruby ruby SimpleCov - RSpec .resultset.json   C / C++ lcov lcov lcov.info   PHP clover Clover coverage.xml   Javascript / Typescript lcov lcov lcov.info     Comment Command  NAME: covergates comment - leave a report summary comment USAGE: covergates comment [command options] [arguments...] OPTIONS: --report value report id [$REPORT_ID] --number value pull request number [$DRONE_PULL_REQUEST, $PULL_REQUEST] --help, -h show help (default: false) covergates comment will leave a brief summary on your pull request. Here is an example:\nNotice  The command may require running covergates upload with --branch to work.    "
},
{
	"uri": "https://docs.covergates.com/language/",
	"title": "Supported Language",
	"tags": [],
	"description": "",
	"content": "Tutorial     Language      Go go-example   Perl ongoing   Python ongoing   Ruby (SimpleCov: RSpec) -   lcov (C, C++, Javascript, TypeScript) -   PHP (Clvoer) -    "
},
{
	"uri": "https://docs.covergates.com/ci/",
	"title": "Supported CI",
	"tags": [],
	"description": "",
	"content": "CI tools support is still under testing. Please help to report issue if you encounter any problem. GitHub Action Below is a step example:\n- name: Report uses: covergates/github-actions@v1 with: report-id: \u0026#34;Report ID\u0026#34; report-type: \u0026#34;go\u0026#34; report-file: \u0026#34;./coverage.out\u0026#34; pull-request: \u0026#34;true\u0026#34; Arguments:\n report-id Report ID could be found in repository setting report-type refer to Upload Command for more detail report-file coverage report pull-request set true to leave a comment on your pull request  Reach the source code for more detail.  Drone Covergates supports Drone CI. The supported platforms are:\n Linux x64 ARM ARM x64  Below is a .drone.yml example:\nkind: pipeline name: default steps: - name: upload image: covergates/drone-covergates settings: report_id: bt9huh223akg00dkqseg report: ./coverage/lcov.info type: lcov To leave a comment on pull request:\nkind: pipeline name: default steps: - name: upload image: covergates/drone-covergates settings: report_id: bt9huh223akg00dkqseg report: ./coverage/lcov.info type: lcov comment: true when: event: - pull_request To upload report to protected repository with OAuth Token:\nkind: pipeline name: default steps: - name: upload image: covergates/drone-covergates settings: report_id: bt9huh223akg00dkqseg report: ./coverage/lcov.info token: YOUR_OAUTH_TOKEN type: lcov  Reach the source code for more detail.  "
},
{
	"uri": "https://docs.covergates.com/start/setting/",
	"title": "Repository Setting",
	"tags": [],
	"description": "",
	"content": "You could config repository on setting page. Filter Path  Filter takes regular expressions and trims the path. Take Go coverage report for example:\nmode: set github.com/covergates/covergates/modules/report/report.go:22.100,24.45 2 1 github.com/covergates/covergates/modules/report/report.go:27.2,28.45 2 1 github.com/covergates/covergates/modules/report/report.go:39.2,39.22 1 1 github.com/covergates/covergates/modules/report/report.go:47.2,48.45 2 1 github.com/covergates/covergates/modules/report/report.go:52.2,55.8 1 1 github.com/covergates/covergates/modules/report/report.go:24.45,26.3 1 1 github.com/covergates/covergates/modules/report/report.go:28.45,33.32 2 1 github.com/covergates/covergates/modules/report/report.go:37.3,37.38 1 1 github.com/covergates/covergates/modules/report/report.go:33.32,36.4 2 1 You could remove github.com/covergates/covergates with setting:\nWe are working on default filters, you could refer to GitHub for the progress or help us by contributing.  "
},
{
	"uri": "https://docs.covergates.com/server/",
	"title": "Self-Hosted Server",
	"tags": [],
	"description": "",
	"content": "Covergates provides the easiest way to run self-hosted service! Getting Start  Get latest released covergates-server binary. Download .tar.gz for your platform and extract it to the path you like. Then run:\nCopy   ./covergates-server    The server should start and bind to http://localhost:8080.\nConfiguration  covergates-server uses environment variables to config.\nConfig Server You can config server address and it\u0026rsquo;s base url.\n GATES_SERVER_ADDR Default http://localhost:8080 GATES_SERVER_BASE Default /  For example:\nCopy   export GATES_SERVER_ADDR=\u0026#34;https://covergates.com\u0026#34;    or\nCopy   export GATES_SERVER_ADDR=\u0026#34;http://your.domain.name\u0026#34; export GATES_SERVER_BASE=\u0026#34;/covergates\u0026#34; # Server will bind to http://your.domain.name/covergates    Config Database covergates-server uses SQLite by default, therefore database server is not necessary. It will create a core.db under working path, all reports will save into core.db. You can change the database name with:\nCopy   export GATES_DB_NAME=\u0026#34;covergates.db\u0026#34;    To use PostgreSQL as database server. Here is an example:\nCopy   export GATES_DB_DRIVER=\u0026#34;postgres\u0026#34;, export GATES_DB_HOST=\u0026#34;127.0.0.1\u0026#34;, export GATES_DB_PORT=\u0026#34;5432\u0026#34;, export GATES_DB_USER=\u0026#34;postgres\u0026#34;, export GATES_DB_NAME=\u0026#34;covergates\u0026#34;, export GATES_DB_PASSWORD=\u0026#34;PASSWORD\u0026#34;,    You need to create a database on your PostgreSQL server in advance.  To use MySQL as database server. Here is an example:\nCopy   export GATES_DB_DRIVER=\u0026#34;mysql\u0026#34;, export GATES_DB_HOST=\u0026#34;127.0.0.1\u0026#34;, export GATES_DB_PORT=\u0026#34;3306\u0026#34;, export GATES_DB_USER=\u0026#34;mysql\u0026#34;, export GATES_DB_NAME=\u0026#34;covergates\u0026#34;, export GATES_DB_PASSWORD=\u0026#34;PASSWORD\u0026#34;,    Do not use NO_ZERO_IN_DATE in your sql_mode. Covergates may use dummy date (value Zero) for OAuth token without expiration date  Config Git Service covergates-server requires to connect with a Git service to access your source code. Supported Git service are:\n Gitea GitHub GitLab  Please refer to the Git service you using to learn how to config covergates-server.\n"
},
{
	"uri": "https://docs.covergates.com/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.covergates.com/",
	"title": "Covergates",
	"tags": [],
	"description": "",
	"content": "Welcome to Covergates User Guide! What is Covergates?  Covergates is a self-hosted coverage reports management web service. It\u0026rsquo;s an alternative to services like:\n Code Climate Codecov Coveralls  The goal of this project is to provide an easiest way to deploy a self-hosted service to track code coverage. You don\u0026rsquo;t need to have root permission, network connection or even database server to run covergates. Covergates is built with Go language, therefore it provides an independent binary distribution across all platforms that Go supports. It includes Linux, Windows and macOS.\nFeatures    Git Service Support\n Gitea GitHub GitLab    Languages Support\n Go Python Ruby Perl C / C++ Javascript TypeScript PHP    CI Tools\n GitHub Action Drone    Database\n SQLite PostgreSQL MySQL    Web Service\n  Source Code Coverage Highlight\n  Repository Setting Dashboard\n  Commits History\n  Promotions\n  Coverage Badge \n  Repository Status Card\n\n      Coming Soon   We are working on:\n  Language Support\n Java Others, let us know the language you want!    "
},
{
	"uri": "https://docs.covergates.com/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]
